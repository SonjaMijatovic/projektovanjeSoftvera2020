{"ast":null,"code":"import CONFIG from '../config';\nimport AuthenticationTypes from \"../constants/AuthenticationTypes\";\nimport HttpMethod from '../constants/HttpMethod';\nimport history from '../history';\nimport { clearUserData, getRefreshToken, refreshToken, setTokenToLocalStorage } from './OAuth';\nimport axios from 'axios';\n\nconst Axios = function () {\n  let instance;\n\n  function createInstance() {\n    return axios.create({\n      baseURL: CONFIG.baseUrl\n    });\n  }\n\n  return {\n    getInstance: function () {\n      if (!instance) {\n        instance = createInstance();\n      }\n\n      if (getTokenType()) {\n        instance.defaults.headers.common['Authorization'] = getToken();\n      }\n\n      instance.all = axios.all;\n      return instance;\n    }\n  };\n}();\n\nAxios.getInstance().interceptors.response.use(response => {\n  response.ok = response.status >= 200 && response.status < 300;\n  return response;\n}, async error => {\n  const {\n    response: {\n      status\n    }\n  } = error;\n\n  if (status === 404) {\n    history.push('/not-found');\n  } else if (status === 500) {\n    history.push('/error');\n  } else if (status === 401) {\n    history.push('/forbidden');\n  } else if (status === 403) {\n    clearUserData();\n    history.push('/');\n    return error;\n  }\n\n  return error;\n});\nexport async function request(url, data = [], method = HttpMethod.GET, options = {}) {\n  let headers = {\n    'Access-Control-Allow-Credentials': 'true',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Authorization',\n    'Accept': 'application/json'\n  };\n  return await connect(url, data, method, headers);\n}\nexport async function requestFile(url, data = [], method = HttpMethod.GET) {\n  try {\n    let tokenType = getTokenType();\n    let headers = {\n      'Access-Control-Allow-Credentials': 'true',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Authorization',\n      'Accept': 'application/json',\n      'content-type': 'multipart/form-data'\n    };\n\n    if (tokenType) {//headers['Authorization'] = getToken();\n    }\n\n    return await connect(url, data, method, headers);\n  } catch (error) {\n    history.push(\"/error\");\n  }\n}\nexport async function connect(url, data, method, options) {\n  switch (method) {\n    case HttpMethod.GET:\n      {\n        return await Axios.getInstance().get(url + makeParametersList(data), options);\n      }\n\n    case HttpMethod.POST:\n      return Axios.getInstance().post(url, data, options);\n\n    case HttpMethod.PUT:\n      return Axios.getInstance().put(url, data, options);\n\n    case HttpMethod.DELETE:\n      return Axios.getInstance().delete(url, options);\n  }\n}\nexport function makeParametersList(parameters) {\n  let parametersList = `?`;\n  Object.keys(parameters).map((key, index) => parametersList += `${key}=${parameters[key]}&`);\n  parametersList = parametersList.slice(0, -1);\n  return parametersList === '?' ? '' : parametersList;\n}\nexport function getToken() {\n  if (getTokenType() === AuthenticationTypes.BearerToken) {\n    return 'Bearer ' + localStorage.getItem(CONFIG.tokenKey);\n  } else if (getTokenType() === AuthenticationTypes.SocialToken) {\n    return 'Social ' + localStorage.getItem(CONFIG.socialTokenKey);\n  }\n\n  return '';\n}\nexport function getUserFromLocalStorage() {\n  let user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n}\n\nfunction getTokenType() {\n  if (localStorage.getItem(CONFIG.tokenKey)) {\n    return AuthenticationTypes.BearerToken;\n  } else if (localStorage.getItem(CONFIG.socialTokenKey)) {\n    return AuthenticationTypes.SocialToken;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/projektovanjeSoftvera2020/frontend/src/base/HTTP.js"],"names":["CONFIG","AuthenticationTypes","HttpMethod","history","clearUserData","getRefreshToken","refreshToken","setTokenToLocalStorage","axios","Axios","instance","createInstance","create","baseURL","baseUrl","getInstance","getTokenType","defaults","headers","common","getToken","all","interceptors","response","use","ok","status","error","push","request","url","data","method","GET","options","connect","requestFile","tokenType","get","makeParametersList","POST","post","PUT","put","DELETE","delete","parameters","parametersList","Object","keys","map","key","index","slice","BearerToken","localStorage","getItem","tokenKey","SocialToken","socialTokenKey","getUserFromLocalStorage","user","JSON","parse"],"mappings":"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","sourcesContent":["import CONFIG from '../config';\nimport AuthenticationTypes from \"../constants/AuthenticationTypes\";\nimport HttpMethod from '../constants/HttpMethod';\nimport history from '../history';\nimport {clearUserData, getRefreshToken, refreshToken, setTokenToLocalStorage} from './OAuth';\nimport axios from 'axios';\n\nconst Axios = (function () {\n\n    let instance;\n\n    function createInstance() {\n        return axios.create({\n            baseURL: CONFIG.baseUrl\n        });\n    }\n\n    return {\n        getInstance: function () {\n\n            if(!instance) {\n                instance = createInstance();\n            }\n\n            if(getTokenType()) {\n                instance.defaults.headers.common['Authorization']  = getToken();\n            }\n            instance.all = axios.all;\n\n            return instance;\n        }\n    }\n})();\n\nAxios.getInstance().interceptors.response.use(response => {\n\n    response.ok = response.status >= 200 && response.status < 300;\n\n    return response;\n}, async error => {\n\n    const { response: { status } } = error;\n\n    if(status === 404) {\n\n        history.push('/not-found');\n    }\n    else if(status === 500) {\n\n        history.push('/error');\n    }\n    else if(status === 401) {\n\n        history.push('/forbidden');\n    }\n    else if(status === 403) {\n\n        clearUserData();\n        history.push('/');\n        return error;\n    }\n\n    return error;\n});\n\nexport async function request(url, data = [], method = HttpMethod.GET, options = {}) {\n\n    let headers =  {\n        'Access-Control-Allow-Credentials':'true',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Authorization',\n        'Accept': 'application/json',\n        \n    };\n\n    return await connect(url, data, method, headers);\n}\n\nexport async function requestFile(url, data = [], method = HttpMethod.GET) {\n\n    try {\n\n        let tokenType = getTokenType();\n\n        let headers =  {\n            'Access-Control-Allow-Credentials':'true',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Headers': 'Authorization',\n            'Accept': 'application/json',\n            'content-type': 'multipart/form-data'\n        };\n\n        if (tokenType) {\n            //headers['Authorization'] = getToken();\n        }\n\n        return await connect(url, data, method, headers);\n    } catch (error) {\n        history.push(\"/error\");\n    }\n}\n\nexport async function connect(url, data, method, options) {\n\n    switch (method) {\n        case HttpMethod.GET : {\n            return await Axios.getInstance().get(url + makeParametersList(data), options);\n        }\n        case HttpMethod.POST : return Axios.getInstance().post(url, data, options);\n        case HttpMethod.PUT : return Axios.getInstance().put(url, data, options);\n        case HttpMethod.DELETE : return Axios.getInstance().delete(url, options);\n    }\n}\n\nexport function makeParametersList(parameters){\n    let parametersList = `?`;\n\n    Object.keys(parameters).map((key, index) => (\n        parametersList += `${key}=${parameters[key]}&`\n    ));\n\n    parametersList = parametersList.slice(0, -1);\n\n    return parametersList === '?' ? '' : parametersList;\n}\n\nexport function getToken() {\n\n    if (getTokenType() === AuthenticationTypes.BearerToken) {\n        return 'Bearer ' + localStorage.getItem(CONFIG.tokenKey);\n    }\n    else if (getTokenType() === AuthenticationTypes.SocialToken) {\n        return 'Social ' + localStorage.getItem(CONFIG.socialTokenKey);\n    }\n\n    return '';\n}\n\nexport function getUserFromLocalStorage() {\n\n    let user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n}\n\nfunction getTokenType() {\n\n    if (localStorage.getItem(CONFIG.tokenKey))\n    {\n        return AuthenticationTypes.BearerToken;\n    }\n    else if (localStorage.getItem(CONFIG.socialTokenKey)) {\n        return AuthenticationTypes.SocialToken\n    }\n\n    return null;\n}"]},"metadata":{},"sourceType":"module"}