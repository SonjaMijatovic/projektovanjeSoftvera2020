{"ast":null,"code":"import strings from '../localization';\nimport ValidatorTypes from '../constants/ValidatorTypes';\nimport { isNumeric } from \"../util/DataValidation\";\nexport function hasError(errors, type) {\n  return errors && errors[type] && errors[type].length > 0;\n}\nexport function getError(errors, type) {\n  return hasError(errors, type) ? errors[type][0].message : '';\n}\nexport default function getErrorClass(errors, type) {\n  return hasError(errors, type) ? 'error' : '';\n}\nexport function validate(formData, validationList) {\n  let errors = {};\n\n  for (let propertyKey of Object.keys(validationList)) {\n    let fieldErrors = [];\n    validationList[propertyKey].forEach(validationItem => {\n      if (validationItem.type === ValidatorTypes.REQUIRED) {\n        if (!required(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.RequiredErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.MIN_LENGTH) {\n        if (!minLength(formData[propertyKey], validationItem.min)) {\n          fieldErrors.push({\n            message: `${strings.validation.MinLengthErrorMessage}${validationItem.min}`\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.MAX_LENGTH) {\n        if (!maxLength(formData[propertyKey], validationItem.max)) {\n          fieldErrors.push({\n            message: `${strings.validation.MaxLengthErrorMessage}${validationItem.max}`\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.EMAIL) {\n        if (!email(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.EmailErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.PASSWORD) {\n        if (!password(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.PasswordErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.NOT_EMPTY_ARRAY) {\n        if (!notEmptyArray(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.RequiredErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.SELECTED_OPTION) {\n        if (!formData[propertyKey] || formData[propertyKey] == '-1') {\n          fieldErrors.push({\n            message: strings.validation.RequiredErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.IS_NUMBER) {\n        if (!isNumeric(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.notNumber\n          });\n        }\n      }\n    });\n    errors[propertyKey] = fieldErrors;\n  }\n\n  return errors;\n}\n\nfunction notEmptyArray(data) {\n  return !(!data || data.length === 0);\n}\n\nfunction required(data) {\n  return !(!data || data === '');\n}\n\nfunction minLength(data, minLength) {\n  return data && data.length >= minLength;\n}\n\nfunction maxLength(data, maxLength) {\n  return data && data.length <= maxLength;\n}\n\nfunction email(data) {\n  let regexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regexp.test(data);\n}\n\nfunction password(data) {\n  let regexp = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,}$/;\n  return regexp.test(data);\n}\n\nexport function isFormValid(errors) {\n  for (let key in errors) {\n    let error = errors[key];\n\n    if (error.length !== 0) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/smijatovic/Documents/Projects/projektovanjeSoftvera2020/frontend/src/functions/Validation.js"],"names":["strings","ValidatorTypes","isNumeric","hasError","errors","type","length","getError","message","getErrorClass","validate","formData","validationList","propertyKey","Object","keys","fieldErrors","forEach","validationItem","REQUIRED","required","push","validation","RequiredErrorMessage","MIN_LENGTH","minLength","min","MinLengthErrorMessage","MAX_LENGTH","maxLength","max","MaxLengthErrorMessage","EMAIL","email","EmailErrorMessage","PASSWORD","password","PasswordErrorMessage","NOT_EMPTY_ARRAY","notEmptyArray","SELECTED_OPTION","IS_NUMBER","notNumber","data","regexp","test","isFormValid","key","error"],"mappings":"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","sourcesContent":["import strings from '../localization';\nimport ValidatorTypes from '../constants/ValidatorTypes';\nimport {isNumeric} from \"../util/DataValidation\";\n\n\nexport  function hasError(errors, type) {\n    return errors && errors[type] && errors[type].length > 0;\n}\n\nexport function getError(errors, type) {\n\n    return hasError(errors, type) ? errors[type][0].message : '';\n}\n\nexport default function getErrorClass(errors, type) {\n    return hasError(errors, type) ? 'error' : '';\n}\n\nexport function validate(formData, validationList) {\n\n    let errors = {};\n\n    for (let propertyKey of Object.keys(validationList)) {\n\n        let fieldErrors = [];\n\n        validationList[propertyKey].forEach((validationItem) => {\n\n            if (validationItem.type === ValidatorTypes.REQUIRED) {\n                if (!required(formData[propertyKey])) {\n\n                    fieldErrors.push(\n                        {\n                            message: strings.validation.RequiredErrorMessage\n                        });\n                }\n            }\n            else if (validationItem.type === ValidatorTypes.MIN_LENGTH) {\n                if (!minLength(formData[propertyKey], validationItem.min)) {\n                    fieldErrors.push(\n                        {\n                            message: `${strings.validation.MinLengthErrorMessage}${validationItem.min}`\n                        });\n                }\n\n            }\n            else if (validationItem.type === ValidatorTypes.MAX_LENGTH) {\n                if (!maxLength(formData[propertyKey], validationItem.max)) {\n                    fieldErrors.push(\n                        {\n                            message: `${strings.validation.MaxLengthErrorMessage}${validationItem.max}`\n                        });\n                }\n            }\n            else if (validationItem.type === ValidatorTypes.EMAIL) {\n                if (!email(formData[propertyKey])) {\n                    fieldErrors.push(\n                        {\n                            message: strings.validation.EmailErrorMessage\n                        });\n                }\n            }\n            else if (validationItem.type === ValidatorTypes.PASSWORD) {\n                if (!password(formData[propertyKey])) {\n                    fieldErrors.push(\n                        {\n                            message: strings.validation.PasswordErrorMessage\n                        });\n                }\n            }\n            else if (validationItem.type === ValidatorTypes.NOT_EMPTY_ARRAY) {\n                if (!notEmptyArray(formData[propertyKey])) {\n                    fieldErrors.push(\n                        {\n                            message: strings.validation.RequiredErrorMessage\n                        });\n                }\n            }\n            else if (validationItem.type === ValidatorTypes.SELECTED_OPTION) {\n\n                if (!formData[propertyKey] || formData[propertyKey] == '-1') {\n                    fieldErrors.push(\n                        {\n                            message: strings.validation.RequiredErrorMessage\n                        });\n                }\n            }\n            else if (validationItem.type === ValidatorTypes.IS_NUMBER) {\n\n                if (!isNumeric(formData[propertyKey])) {\n                    fieldErrors.push(\n                        {\n                            message: strings.validation.notNumber\n                        });\n                }\n            }\n\n\n        });\n\n        errors[propertyKey] = fieldErrors;\n    }\n\n    return errors;\n}\n\nfunction notEmptyArray(data) {\n    return !(!data || data.length === 0);\n}\n\nfunction required(data) {\n    return !(!data || data === '');\n}\n\nfunction minLength(data, minLength) {\n    return data && data.length >= minLength;\n}\n\nfunction maxLength(data, maxLength) {\n    return data && data.length <= maxLength;\n}\n\nfunction email(data) {\n    let regexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return regexp.test(data);\n}\n\nfunction password(data) {\n    let regexp = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,}$/;\n    return regexp.test(data);\n}\n\nexport function isFormValid(errors) {\n    for (let key in errors) {\n        let error = errors[key];\n        if (error.length !== 0){\n            return false;\n        }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}