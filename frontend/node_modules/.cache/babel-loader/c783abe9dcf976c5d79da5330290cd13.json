{"ast":null,"code":"import React, { Component } from 'react';\nimport { validate, isFormValid } from '../functions/Validation';\nimport BaseComponent from \"../common/BaseComponent\";\nimport update from 'immutability-helper';\n\nclass FormComponent extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.validationList = {};\n    this.state = {\n      data: {},\n      errors: {},\n      showLoader: false\n    };\n    this.changeData = this.changeData.bind(this);\n    this.changeCheckBox = this.changeCheckBox.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  changeData(event, data = 'data') {\n    this.setState({\n      [data]: update(this.state[data], {\n        [event.target.name]: {\n          $set: event.target.value\n        }\n      })\n    });\n  }\n\n  changeCheckBox(event) {\n    const field = event.target.name;\n    const data = this.state.data;\n    data[field] = !data[field];\n    this.setState({\n      data\n    });\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  isFloat(n) {\n    return !isNaN(parseFloat(n));\n  }\n\n  isInt(n) {\n    return isFinite(n);\n  }\n\n  validate() {\n    let errors = validate(this.state.data, this.validationList);\n    this.setState({\n      errors\n    });\n    return isFormValid(errors);\n  }\n\n  setError(key, value) {\n    this.setState({\n      errors: update(this.state.errors, {\n        [key]: {\n          $set: [{\n            message: value\n          }]\n        }\n      })\n    });\n  }\n\n  showDrawerLoader() {\n    this.setState({\n      showLoader: true\n    });\n  }\n\n  hideDrawerLoader() {\n    this.setState({\n      showLoader: false\n    });\n  }\n\n}\n\nexport default FormComponent;","map":{"version":3,"sources":["/Users/smijatovic/Documents/Projects/projektovanjeSoftvera2020/frontend/src/common/FormComponent.js"],"names":["React","Component","validate","isFormValid","BaseComponent","update","FormComponent","constructor","props","validationList","state","data","errors","showLoader","changeData","bind","changeCheckBox","event","setState","target","name","$set","value","field","isNumeric","n","isNaN","parseFloat","isFinite","isFloat","isInt","setError","key","message","showDrawerLoader","hideDrawerLoader"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,yBAApC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,aAAN,SAA4BF,aAA5B,CAA0C;AAItCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAFnBC,cAEmB,GAFF,EAEE;AAGf,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,MAAM,EAAE,EAFC;AAGTC,MAAAA,UAAU,EAAE;AAHH,KAAb;AAMA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKb,QAAL,GAAgB,KAAKA,QAAL,CAAca,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEDD,EAAAA,UAAU,CAACG,KAAD,EAAQN,IAAI,GAAG,MAAf,EAAuB;AAE7B,SAAKO,QAAL,CAAc;AACV,OAACP,IAAD,GAAQN,MAAM,CAAC,KAAKK,KAAL,CAAWC,IAAX,CAAD,EAAmB;AAAE,SAACM,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqB;AAACC,UAAAA,IAAI,EAAEJ,KAAK,CAACE,MAAN,CAAaG;AAApB;AAAvB,OAAnB;AADJ,KAAd;AAGH;;AAEDN,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAElB,UAAMM,KAAK,GAAGN,KAAK,CAACE,MAAN,CAAaC,IAA3B;AACA,UAAMT,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACAA,IAAAA,IAAI,CAACY,KAAD,CAAJ,GAAc,CAACZ,IAAI,CAACY,KAAD,CAAnB;AAEA,SAAKL,QAAL,CAAc;AACVP,MAAAA;AADU,KAAd;AAGH;;AAEDa,EAAAA,SAAS,CAACC,CAAD,EAAI;AACT,WAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAN,IAAyBG,QAAQ,CAACH,CAAD,CAAxC;AACH;;AAEDI,EAAAA,OAAO,CAACJ,CAAD,EAAI;AACP,WAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAb;AACH;;AAEDK,EAAAA,KAAK,CAACL,CAAD,EAAI;AACL,WAAOG,QAAQ,CAACH,CAAD,CAAf;AACH;;AAEDvB,EAAAA,QAAQ,GAAI;AAER,QAAIU,MAAM,GAAGV,QAAQ,CAAC,KAAKQ,KAAL,CAAWC,IAAZ,EAAkB,KAAKF,cAAvB,CAArB;AAEA,SAAKS,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AAEA,WAAOT,WAAW,CAACS,MAAD,CAAlB;AACH;;AAEDmB,EAAAA,QAAQ,CAACC,GAAD,EAAMV,KAAN,EAAa;AACjB,SAAKJ,QAAL,CAAc;AACVN,MAAAA,MAAM,EAAEP,MAAM,CAAC,KAAKK,KAAL,CAAWE,MAAZ,EAAoB;AAAE,SAACoB,GAAD,GAAO;AAACX,UAAAA,IAAI,EAAE,CAAE;AAAEY,YAAAA,OAAO,EAAEX;AAAX,WAAF;AAAP;AAAT,OAApB;AADJ,KAAd;AAGH;;AAEDY,EAAAA,gBAAgB,GAAG;AACf,SAAKhB,QAAL,CAAc;AACVL,MAAAA,UAAU,EAAE;AADF,KAAd;AAGH;;AAEDsB,EAAAA,gBAAgB,GAAG;AACf,SAAKjB,QAAL,CAAc;AACVL,MAAAA,UAAU,EAAE;AADF,KAAd;AAGH;;AAzEqC;;AA4E1C,eAAeP,aAAf","sourcesContent":["import React, {Component} from 'react'\nimport {validate, isFormValid} from '../functions/Validation';\nimport BaseComponent from \"../common/BaseComponent\";\nimport update from 'immutability-helper';\n\nclass FormComponent extends BaseComponent {\n\n    validationList = {};\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: {},\n            errors: {},\n            showLoader: false\n        };\n\n        this.changeData = this.changeData.bind(this);\n        this.changeCheckBox = this.changeCheckBox.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    changeData(event, data = 'data') {\n\n        this.setState({\n            [data]: update(this.state[data], { [event.target.name]: {$set: event.target.value} })\n        });\n    }\n\n    changeCheckBox(event) {\n\n        const field = event.target.name;\n        const data = this.state.data;\n        data[field] = !data[field];\n\n        this.setState({\n            data\n        });\n    }\n\n    isNumeric(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    isFloat(n) {\n        return !isNaN(parseFloat(n));\n    }\n\n    isInt(n) {\n        return isFinite(n)\n    }\n\n    validate () {\n\n        let errors = validate(this.state.data, this.validationList);\n\n        this.setState({errors});\n\n        return isFormValid(errors);\n    }\n\n    setError(key, value) {\n        this.setState({\n            errors: update(this.state.errors, { [key]: {$set: [ { message: value} ]} })\n        });\n    }\n\n    showDrawerLoader() {\n        this.setState({\n            showLoader: true\n        });\n    }\n\n    hideDrawerLoader() {\n        this.setState({\n            showLoader: false\n        });\n    }\n}\n\nexport default FormComponent;"]},"metadata":{},"sourceType":"module"}