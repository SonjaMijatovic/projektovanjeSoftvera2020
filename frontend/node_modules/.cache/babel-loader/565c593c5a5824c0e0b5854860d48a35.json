{"ast":null,"code":"import React from 'react';\nimport FormComponent from \"./FormComponent\";\n\nclass Page extends FormComponent {\n  constructor(props) {\n    super(props);\n    this.params = [];\n    this.page = undefined;\n    this.setPage = this.setPage.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadParams();\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(props) {\n    if (!this.needRefresh()) {\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  fetchData() {}\n\n  getSearchParam(param) {\n    let url = new URL(window.location);\n    return url.searchParams.get(param);\n  }\n\n  loadParams(data = 'searchData') {\n    let loadedData = {};\n\n    for (let param of this.params) {\n      let paramString = this.getSearchParam(param.name);\n      let value;\n\n      if (!paramString || paramString === '') {\n        if (this.props[param.name]) {\n          loadedData[param.name] = this.props[param.name];\n        } else {\n          loadedData[param.name] = param.defaultValue;\n        }\n\n        continue;\n      }\n\n      if (paramString.includes(',')) {\n        value = [];\n\n        for (let item of paramString.split(',')) {\n          if (this.isNumeric(item)) {\n            if (this.isFloat(item)) {\n              value.push(parseFloat(item));\n            } else if (this.isInt(item)) {\n              value.push(parseInt(item));\n            }\n          }\n        }\n      } else if (this.isNumeric(paramString)) {\n        if (this.isFloat(paramString)) {\n          value = parseFloat(paramString);\n        } else if (this.isInt(paramString)) {\n          value = parseInt(paramString);\n        }\n      } else {\n        value = paramString;\n      }\n\n      loadedData[param.name] = value;\n    }\n\n    this.state[data] = loadedData;\n  }\n\n  buildParams(data = 'searchData') {\n    let result = '?';\n    let hasParams = false;\n\n    for (let param of this.params) {\n      if (this.state[data][param.name]) {\n        result += this.buildParam(param, this.state[data], hasParams);\n        hasParams = true;\n      }\n    }\n\n    return hasParams ? result : '';\n  }\n\n  buildParam(param, data, hasParams) {\n    let result = param.name + '=';\n\n    if (hasParams) {\n      result = '&' + result;\n    }\n\n    if (Array.isArray(data[param.name])) {\n      result += data[param.name].join();\n    } else {\n      result += data[param.name];\n    }\n\n    return result;\n  }\n\n  needRefresh(data = 'searchData') {\n    const oldParams = JSON.parse(JSON.stringify(this.state[data]));\n    this.loadParams(data);\n\n    for (const [key, value] of Object.entries(this.state[data])) {\n      if (oldParams[key] != this.state[data][key]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  setPage(page) {\n    this.state.searchData.page = page;\n    this.props.history.push(this.page.path + this.buildParams());\n    this.fetchData();\n  }\n\n}\n\nexport default Page;","map":{"version":3,"sources":["/Users/smijatovic/Documents/Projects/projektovanjeSoftvera2020/frontend/src/common/Page.js"],"names":["React","FormComponent","Page","constructor","props","params","page","undefined","setPage","bind","componentWillMount","loadParams","fetchData","componentWillReceiveProps","needRefresh","getSearchParam","param","url","URL","window","location","searchParams","get","data","loadedData","paramString","name","value","defaultValue","includes","item","split","isNumeric","isFloat","push","parseFloat","isInt","parseInt","state","buildParams","result","hasParams","buildParam","Array","isArray","join","oldParams","JSON","parse","stringify","key","Object","entries","searchData","history","path"],"mappings":"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","sourcesContent":["import React from 'react'\nimport FormComponent from \"./FormComponent\"\n\nclass Page extends FormComponent {\n\n    params = [];\n    page = undefined;\n\n    constructor(props) {\n        super(props);\n\n        this.setPage = this.setPage.bind(this);\n    }\n\n    componentWillMount() {\n\n        this.loadParams();\n\n        this.fetchData();\n    }\n\n    componentWillReceiveProps(props) {\n\n        if(!this.needRefresh()) {\n            return;\n        }\n\n        this.fetchData();\n    }\n\n    fetchData() {\n\n    }\n\n    getSearchParam(param) {\n\n        let url = new URL(window.location);\n\n        return url.searchParams.get(param);\n    }\n\n    loadParams(data = 'searchData') {\n\n        let loadedData = {};\n\n        for(let param of this.params) {\n\n            let paramString = this.getSearchParam(param.name);\n            let value;\n\n            if(!paramString || paramString === '') {\n\n                if(this.props[param.name]) {\n                    loadedData[param.name] = this.props[param.name];\n                }\n                else {\n                    loadedData[param.name] = param.defaultValue;\n                }\n\n                continue;\n            }\n\n            if(paramString.includes(',')) {\n\n                value = [];\n\n                for(let item of paramString.split(',')) {\n\n                    if(this.isNumeric(item)) {\n                        if(this.isFloat(item)) {\n                            value.push(parseFloat(item));\n                        }\n                        else if(this.isInt(item)) {\n                            value.push(parseInt(item));\n                        }\n                    }\n                }\n            }\n            else if(this.isNumeric(paramString)) {\n\n                if(this.isFloat(paramString)) {\n                    value = parseFloat(paramString);\n                }\n                else if(this.isInt(paramString)) {\n                    value = parseInt(paramString);\n                }\n            }\n            else {\n                value = paramString;\n            }\n\n            loadedData[param.name] = value;\n        }\n\n        this.state[data] = loadedData;\n    }\n\n    buildParams(data = 'searchData') {\n\n        let result = '?';\n        let hasParams = false;\n\n        for(let param of this.params) {\n\n            if(this.state[data][param.name]) {\n                result += this.buildParam(param, this.state[data], hasParams);\n                hasParams = true;\n            }\n        }\n\n        return hasParams ? result : '';\n    }\n\n    buildParam(param, data, hasParams) {\n\n        let result = param.name + '=';\n\n        if(hasParams) {\n            result = '&' + result;\n        }\n\n        if(Array.isArray(data[param.name])) {\n            result += data[param.name].join();\n        }\n        else {\n            result += data[param.name]\n        }\n\n        return result;\n    }\n\n    needRefresh(data = 'searchData') {\n\n        const oldParams = JSON.parse(JSON.stringify(this.state[data]));\n\n        this.loadParams(data);\n\n        for(const [key, value] of Object.entries(this.state[data])) {\n\n            if(oldParams[key] != this.state[data][key]){\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    setPage(page) {\n\n        this.state.searchData.page = page;\n\n        this.props.history.push(this.page.path + this.buildParams());\n\n        this.fetchData();\n    }\n}\n\nexport default Page;"]},"metadata":{},"sourceType":"module"}